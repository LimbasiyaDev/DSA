# Definition for a binary tree node.
class TreeNode(object):
    def _init_(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        # Base case: If root is None or matches either p or q, return root
        if not root or root == p or root == q:
            return root

        # Search in the left and right subtrees
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)

        # If both left and right return non-null values, root is the LCA
        if left and right:
            return root

        # If either left or right is non-null, return that non-null value
        return left if left else right